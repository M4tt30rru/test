
\section{Introduction}
\label{sec:introduction}
% introduction to modularity

Modern software systems are large and complex products, built according to a modular structure, where 
modules (like classes in Object Oriented systems) are connected with each other 
to enable software reuse, encapsulation, information hiding, maintainability and so on. 
Software modularization is acknowledged as a good programming practice \cite{Parnas:1972, Baldwin:1999, Sanchez:1996} 
and a certain emphasis is put on the prescription that design software with low coupling and high cohesion would increase its quality \cite{Chidamber:1994}.  
In this work we present a study on the relationships between software systems quality and their modular structure.
Depending on the fact that software systems are inherently complex, as far as the authors' knowledge, the best model to represent 
them is by retrieving their associated networks, and studying their topological properties \cite{Myers:2003, Subelj:2011, Wen:2008, Subelj:2014}.
In a software network nodes are associated to software modules (e.g. classes) and
edges are associated to connection between software module (e.g. inheritance, collaboration relationships).
Since we are interested in investigating software modular structure - and its impact in software quality - 
we address specific network properties: community structure, modularity and clustering coefficient.
A community is a set of nodes that are densely connected, with respect of nodes that are outside the community \cite{Girvan:2002}. 
Modularity is a function that measure how marked is a community structure (namely how nodes are distributed in communities) \cite{NG:2004}.
Clustering coefficient represent a measure of how much connected are nodes inside a network \cite{Newman:2003}. 



% Modern Object Oriented software systems are built according to a modular structure, 
% where many interacting elementary units, like software modules, classes, objects, 
% depend on and are connected to each other, in order to optimize 
% software reuse, encapsulation, information hiding, maintainability and so on.

% the following is a repetition?
% Modularity in Software Engineering is the property of a software which is well separated
% into simpler components
%, called modules, 
% according to their functionalities and responsibilities.

% insert references (which is good) but repeat the advantages!
% Modularization has been devised as a good programming practice since the pioneer work
% of Parnas \cite{Parnas:1972}, and also more recent works \cite{Baldwin:1999, Sanchez:1996}
% explain its many advantages.

% repetition of the advantages from the first paragraph?
% The separation into almost independent components makes the
% whole system more comprehensible, enabling easy replacement of components.
% From a managerial point of view, the development time is shortened
% because developers can work on each module with little need for communication.

% \textbf{Modularity is thus acknowledged as an important feature of software systems and it is related to its quality (PLACE A REF HERE??).
% Moreover, software engineering best practices encourage developers to design software components the way they have low coupling and high cohesion.}
% % Despite the fact that modularity is acknowledged as a significant software property,  
% \textbf{Despite the fact that some metrics like ``Lack of Cohesion M???'' (LCOM) and ``Coupling Between Objects'' (CBO) \ref{Chidamber:1994} 
% return an information about the separation of software modules, by and large, we lack of a precise definition of modularity and there is no metric to characterize it.}. 
% % Moreover, in software engineering, it is widely acknowledge that a good design practice consists in keeping coupling between modules low 
% % and cohesion among them high.  
% \textbf{On the other hand, modern software systems are composed by a large number of modules, 
% among which there are an even larger number of connections, 
% that could be difficult to tackle the problem of characterize software modularity.} 
% A way to provide a measure of modularity (???) comes by approaching the study of software system by modelling them as a complex network (CITE CHINESE PAPER???)}.
% -->
% From this perspective, our study can be seen as a first attempt to provide a synthetic measure of software modularity using
% a complex network model. <---
% Modularity has been proven to be 

\textbf{
% In this scenario, as far as authors' knowledge, the best candidate model to represent a software system is the complex network.
% In order to perform a network analysis we need to associate to a software system 
% The size of a modern software project, as measured by the number of modules, 
% can easily reach tens of thousands of elementary units, 
% and among such modules there is an even larger number of connections, namely the
% different kind of software relationships, like inheritance, 
% composition, dependencies and others.
% As far as authors' knowledge, complex network are one of the best candidate to represent a software system
% Being the size of a modern software project, as measured by the number of modules, 
% in numbers of tens of thousands of elementary units, 
% and among such modules there is an even larger number of connections, namely the
% different kind of software relationships, like inheritance, 
% composition, dependencies and others.
% In this work we reported the results of our attempt to characterize the software quality by studying the network associated to software systems.
We studied several releases of a large software system, Netbeans, widely used by software developers, performing an analysis on the relationship between
community structure, clustering coefficient and software quality along the time. 
Our aim is to figure out if the studied metrics can be used to predict 
quality of future releases.
% Specifically, we focus our attention on the relationship between modular organization of software system (namely their community structure) 
% as detected by analysing network topology and the defectiveness of software modules (namely their classes) as reported in their Issue Tracking Systems (ITS).
% We performed a study on the evolution of the systems, analysing several releases of each system, to figure out if the studied metrics can be used to predict 
% quality of future releases.
}

\textbf{This paper is organized as follows. In Section \ref{Methodology} we illustrate the methodology we used. Next, in Section \ref{Results}, we present some of 
our results and then, in Section \ref{Discussion}, we discuss them. Finally, in Section \ref{Conclusions} we draw some conclusions.}
% explain how we built the analysed networks and retrieved
% the metrics we are interested in. 
% Our findings, reported in Section \ref{sec:results}, are multifaceted and span different aspects of the application 
% of community detection to software systems. They provide the answers to the Research Questions, which are discussed in detail in Section
% \ref{sec:discussion}. We end with our Conclusions in Section \ref{sec:conclusions}.
% 
% However, a great degree of modularity does not only bring benefits to system design.
% Sometimes, if modules are very specific, the cost of making interfaces can be high \cite{Schilling:2000}. 
% It can also be difficult to understand the interaction between modules or to integrate them,
% or it can affect design creativity \cite{Schilling:2000, Arnheiter:2006}. 
% Sometimes, high modularity can affect the total system performance \cite{Arnheiter:2006}. 

% Such modularity, along with interconnections among modules, the large number of modules, 
% the complexity of their interconnections, are all signatures of a structure
% which has been demonstrated to belong to the class of complex networks \cite{Myers:2003}. 
% Software systems exhibit scale-free and small-world properties, like those identified in other technological, 
% sociological, and biological systems \cite{Jenkins:2007}, and it is thus sensible to study them using techniques and instruments adopted for analyzing complex networks. 
% 
% One of the main issues when investigating complex networks properties 
% is the problem of determining their community structure, if any. 
% This issue, born in the discipline  
% of social analysis, has become increasingly interesting in the field of 
% complex networks, where many systems 
% from very different fields have been 
% found to 
% display a clear community structure \cite{Subelj:2011, Clauset:2004, Fortunato:2010, NFast:2004, NG:2004}.
% 
% The problem resides in finding the optimal division of a network in "communities" that is, 
% set of nodes tightly connected, 
% according to some measure, and characterizing the community structure by
% measuring different metrics for the obtained partition. 
% The most common approach is the optimization of a 
% \textit {modularity function}
% over the possible divisions of a network.
% The organization of networks in communities, 
% with many edges among vertices of the same cluster and 
% comparatively few edges joining vertices of different clusters
% can reveal fairly independent parts of the network, each playing its own role, 
% and can be of great importance in the field of software systems. 
% In this work we use community detection in software networks, 
% with the aim of detecting community structures in software systems 
% and of using community metrics to analyze and characterize software quality. 
% 
% In the literature there are other attempts to relate software quality to other
% network metrics, such as degree distribution \cite{Turnu:2012}, fan-in and fan-out
% \cite{Murgia:2012} or more generally, to software metrics \cite{Concas:2012a}. 
% Some works focus more on fault prediction, for example via machine-learning algorithms \cite{Catal:2009}.
% Here we focus in particular on community metrics, which 
% are more familiar in the social network context. 
% These metrics can be related to some properties of software systems, such as defectiveness or modularity.
% 

% 
% In this work we address another kind of modularity, defined in complex networks, and apply it to
% software networks.
% This modularity, denoted by $Q$, depends on the topology of the network, and in principle it
% is not related to the functionality of the system underlying the network.
% However, we aim at understanding if the modularity retrieved by specific algorithms for a software network could be related
% to the modularity defined in software design.
% Just as communities in a software network, modules are connected to one another, and often modules coincide
% with communities, meaning that the functional design of a software system and 
% the topological structure of the corresponding network are closely related. 
% 
% Moreover, in software engineering, a good design practice consists in keeping coupling low 
% and cohesion high. 
% In the corresponding software network, where the simpler components are the communities,
% the number of edges between communities can give a measure of inter-community relationships, while the number of edges 
% inside each community could be linked to cohesion.
% The modularity $Q$ gives an indication of the ratio between the number of intra- and inter-community
% edges. When $Q$ is maximal, communities are well separated, which would mean there is high cohesion and 
% low coupling, if communities and modules are somehow equivalent. So high modularity values could indicate that
% the analyzed software system has been designed using good programming practice.
% However, this is not always the case. Sometimes modules and communities do not match, and a high degree of modularity
% in the software Engineering sense, does not coincide with a high value of modularity $Q$ for software networks.
% It is thus interesting to investigate if the two different modularities can be put in relationship with each other,
% since they both can give indications on software quality. Moreover, while modularity in software design is
% a property at design level, before the whole system is realized,
% network modularity $Q$ is known only after the system has been designed and realized.
% If these two metrics are related, it could be possible
% to understand how design decisions would affect system topology and functionalities.
% 

% 
% We analyzed 
% several hundreds of sub-projects from different releases of Eclipse and Netbeans,
% two large Open Source Object Oriented (OO) software systems written in Java. 
% These are two popular Integrated Development Environments (IDEs).
% These systems are composed by many almost independent sub-systems that could be analyzed separately.
% We analyzed different releases along time, so we were able
% to consider the evolution of the properties under study.
% The analyzed releases are Eclipse 2.1, 3.0, 3.1, 3.2, 3.3, 
% and Netbeans 3.2, 3.2.1, 3.3.0, 3.4, 4.0, 6.0.1.
% 
% 
% This work improves a recent preliminary research 
% of the authors on the same subject \cite{Concas:2013}, and examines for the first time,  
% to authors' knowledge, the relationship among different software
% properties and metrics related to community 
% structure and system defectiveness for large software networks. 
% 
% To formulate the research questions we rely on the Goal Question Metrics method of Basili et al. \cite{Basili:1994}.
% According to this approach, we first identify a \textit{goal}, then define some \textit{research questions} and 
% eventually choose some \textit{metrics} to associate to each question.
% The goal is composed by the \textit{purpose}, the \textit{perspective} and the \textit{environment}.
% In this work our aim is to investigate software systems (the \textit{object} of our analysis) to figure out if 
% there are relationships among some of the properties of the related software network and software quality. 
% Here we show that it is possible provide a statistical characterization of the defectiveness of the analyzed software systems in future releases. 
% 
% It is widely accepted that an important marker of a software system quality is the presence (or the absence) of software defects.
% As a consequence, the perspective of our research is to understand if software defects have a significant
% relationship with software network topology, and how to use this information to predict the quality of future releases.
% These predictions can be considered also from the viewpoint of a software developer or of a team leader.
% The model for software quality is the number of defect per class, called defect density, while
% the reference model for software systems is the software network.
% Finally, the environment is represented by the studied releases of Eclipse and NetBeans.
% The properties of software systems we are interested in are their community structure and the related metrics: modularity, number of communities
% and clustering coefficient.
% This leads us to investigate the following research questions:
% 
%  \begin{enumerate}
%  
%   \item  Is defectiveness related to network modularity?
%   \item  Is defectiveness related to the number of communities?
%   \item  Is defectiveness related to network's clustering coefficient?
%  
%  \end{enumerate}
% 

